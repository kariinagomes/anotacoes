    <style>
        qualquer div se comportará assim:
        div {
            background-color: green;
            width: 100px;
            height: 100px;
        }

        só os que tiverem essa classe:
        .classe-teste {
            background-color: red;
        }

        só os que tiverem id: 
        #id-teste {
            background-color: yellow;
        }
    </style>


    Pontos:
        div = 1
        class = 10
        id = 100
        div + classe = 11
        classe + classse = 20
        
        se tiverem duas classes iguais -> considera a última (css é cascata)
        

    Quando usa vírgula significa que ambos terão o mesmo comportamento:
    .classe-teste, .classe-test2 {
        background-color: yellow;
    }

    width + body

    Identificar o elemento principal e modificar os que estão após dele:
        <style>

            .mae {
                background-color: green;
                width: 200px;
                height: 200px;
            }

            .mae div {
                border: 2px solid black;
                background-color: red;
                width: 44px;
                height: 44px;
            }

            .mae div div {
                background-color: red;
            }

            .mae > div {
                height: 96px;
                width: 96px;
            }

        </style>

* POSITION *

- Position não é de layout, é um comportamento específico; 
- O position static (que é o default do position) não aceita top, left... (tem declarar uma position pra isso); 
- Primeiro monta o layout, e depois move (conforme top e left), ou seja, só muda pra top e left depois que 
  renderiza a primeira vez. É muito usado pra animação);
- Animação com css é menos custoso.
- Diferença entre position relative e absolute: o relative leva em consideração os irmãos e o pai, já o absolute leva em consideração somente o pai;
- O relative sempre leva em consideração o primeiro relative que encontrar;
- O position fixed fica isoladão (muito usado pra header);

- Se tiver uma cadeia de divs, sempre vai respeitar quem tem o position.. se nenhum tiver, segue o body. Se nenhum tiver o position relative, não muda nada; (?)

- Os absolutes estão isolados um do outro;

- Body com padding 5 é padrão;

* DISPLAY *

- Block: peixe beta...vive sozinho no aquÁrio (pega uma linha inteira);
- Inline: feito para palavras (só parágrafo q não por ser block, mas span sim), não possue caixa (convive normalmente
          com outros). Como inline não tem altura nem largura, ele sumiria se nao escrever nada;
          Ele inclusive coloca um espaço natural entre os dois, tipo entre palavras.
- Inline-block: 
    None: o elemento some da tela;
    se for mudar de block pra inline, mude para inline-block;


DISPLAY FlexBox:
    - Facilita a criação de layout;
    Divididos em container e item;
        Container: diz como os itens vao funcionar

    flex-direction: direção que vai seguir
    justify-content e align-items -> 

    align-self -> usado quando vc quer que um item específico tenha um comportamento diferente;

    Orientado a conteúdo

    -> diferença entre margin e padding;

    -> margin: 10px 5px 20px 15px sempre no sentido horário
    
    
   -----------------------------------------------------
  
  Javascript:
    -> tipagem dinamica (nao declara variável)
    
    
    Diferença entre var, let e const:
        - let pode ser declarado dentro de um escopo, então não consegue ser visto em outro escopo; 
            Não pode ser declarado duas vezes;  
        - var pode ser declarado várias vezes; então acontecia de sobrepor quando tinha cdigo mto grande;
        - const não alterar o valor;
   
    Para alterar uma constante, vc cria uma constante de objeto e altera o valor de uma propriedade do objeto
   
    Boas práticas: 
        - Usar aspas simples;
        - Não usar var;
        - Usar === ao invés de == 
            assim como !== ao invés de !=      
        
  ----------------------------------------------------------------------------------
     -> Também vimos sobre DOM
       (o arquivo está na máquina da sciensa... lembrar de subir aqui
        
  ----------------------------------------------------------------------------------
    -> REACT
    
    (com map já posso responder o componente)
    
    Vantagens do React:
        * Tem o Virtual DOM
        * É one way 
        
    Boas práticas:
        - Iniciar o componente com letra maiúscula
        
    Stateless Component
    
    Props é uma junção dos atributos passados para o componente
        -> O props pode receber qualquer coisa, inclusive função;
        -> Não pode alterar o props (e se precisasse alterar, pode ser que tenha algo errado)
                Cria um novo carinha, tipo "let funcaoDoida = props.text" e retorna o funcaoDoida ao invés do props
        
    Props.children é tudo o que tá dentro do corpo (lembrar do exemplo dos filhinhos do div); 
    Também pode usar os dois juntos, tipo:
        <h6>
            {props.textooo}
            {props.children}
        </h6>
        e no outro arquivo...
        <ComponenteFuncao textooo="lalala">aqui eh sempre children</ComponenteFuncao>
        
        
   -> Estado são variáveis que podem ser usadas dentro do componente:
        Por hora, classe é usada qndo tem estado
       
  O render é para mostrar na tela, e é chamado novamente toda vez que o estado ou props;
  O constructor roda antes mesmo de renderizar a tela;
  
  (não replicar o props no estado, pode ter algo errado(?), mas existe exceçoes)
  
