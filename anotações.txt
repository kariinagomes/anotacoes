    <style>
        qualquer div se comportará assim:
        div {
            background-color: green;
            width: 100px;
            height: 100px;
        }

        só os que tiverem essa classe:
        .classe-teste {
            background-color: red;
        }

        só os que tiverem id: 
        #id-teste {
            background-color: yellow;
        }
    </style>


    Pontos:
        div = 1
        class = 10
        id = 100
        div + classe = 11
        classe + classse = 20
        
        se tiverem duas classes iguais -> considera a última (css é cascata)
        

    Quando usa vírgula significa que ambos terão o mesmo comportamento:
    .classe-teste, .classe-test2 {
        background-color: yellow;
    }

    width + body

    Identificar o elemento principal e modificar os que estão após dele:
        <style>

            .mae {
                background-color: green;
                width: 200px;
                height: 200px;
            }

            .mae div {
                border: 2px solid black;
                background-color: red;
                width: 44px;
                height: 44px;
            }

            .mae div div {
                background-color: red;
            }

            .mae > div {
                height: 96px;
                width: 96px;
            }

        </style>

* POSITION *

- Position não é de layout, é um comportamento específico; 
- O position static (que é o default do position) não aceita top, left... (tem declarar uma position pra isso); 
- Primeiro monta o layout, e depois move (conforme top e left), ou seja, só muda pra top e left depois que 
  renderiza a primeira vez. É muito usado pra animação);
- Animação com css é menos custoso.
- Diferença entre position relative e absolute: o relative leva em consideração os irmãos e o pai, já o absolute leva em consideração somente o pai;
- O relative sempre leva em consideração o primeiro relative que encontrar;
- O position fixed fica isoladão (muito usado pra header);

- Se tiver uma cadeia de divs, sempre vai respeitar quem tem o position.. se nenhum tiver, segue o body. Se nenhum tiver o position relative, não muda nada; (?)

- Os absolutes estão isolados um do outro;

- Body com padding 5 é padrão;

* DISPLAY *

- Block: peixe beta...vive sozinho no aquÁrio (pega uma linha inteira);
- Inline: feito para palavras (só parágrafo q não por ser block, mas span sim), não possue caixa (convive normalmente
          com outros). Como inline não tem altura nem largura, ele sumiria se nao escrever nada;
          Ele inclusive coloca um espaço natural entre os dois, tipo entre palavras.
- Inline-block: 
    None: o elemento some da tela;
    se for mudar de block pra inline, mude para inline-block;


DISPLAY FlexBox:
    - Facilita a criação de layout;
    Divididos em container e item;
        Container: diz como os itens vao funcionar

    flex-direction: direção que vai seguir
    justify-content e align-items -> 

    align-self -> usado quando vc quer que um item específico tenha um comportamento diferente;

    Orientado a conteúdo

    -> diferença entre margin e padding;

    -> margin: 10px 5px 20px 15px sempre no sentido horário
    
    
   -----------------------------------------------------
  
  Javascript:
    -> tipagem dinamica (nao declara variável)
    
    
    Diferença entre var, let e const:
        - let pode ser declarado dentro de um escopo, então não consegue ser visto em outro escopo; 
            Não pode ser declarado duas vezes;  
        - var pode ser declarado várias vezes; então acontecia de sobrepor quando tinha cdigo mto grande;
        - const não alterar o valor;
   
    Para alterar uma constante, vc cria uma constante de objeto e altera o valor de uma propriedade do objeto
   
    Boas práticas: 
        - Usar aspas simples;
        - Não usar var;
        - Usar === ao invés de == 
            assim como !== ao invés de !=
        
   **********************************************
   
   OQ FIZEMOS NO codesandbox:
   

    import "./styles.css";

    document.getElementById("app").innerHTML = `
    <h1>Hello Vanilla!</h1>
    <div>
      We use Parcel to bundle this sandbox, you can find more info about Parcel
      <a href="https://parceljs.org" target="_blank" rel="noopener noreferrer">here</a>.
    </div>
    `;

    console.log('abc');

    var linguagens = 'Javascript'

    console.log(linguagens)

    var linguagens = 444;

    console.log(linguagens);

    let alo = "hauihdaiuhd"
    alo = 23232424

    const constante = "aqui eh uma constante"

    console = 2

    const aloho = function () {

    }

    const alo2 = 10

    let pessoa = {
      nome: ''
    }


    let tipo = {
      nome: ''
    }

    tipo.nome = 'iahiuahsah'

    tipo.funcao = function () {
      console.log('eu sou uma funcao')
    }

    tipo.funcao();

    let ator1 = 'brad pitt'

    console.log(typeof ator1);

    let qqcoisa = [1, 2, 3]

    //o typeof nao identifica array
    console.log(typeof qqcoisa)
    console.log(Array.isArray(qqcoisa))

    //acessar item
    console.log(qqcoisa[0])


    let qqcoisa2 = [{ name: 'jaqueline' }, 2]

    qqcoisa2[0].name = 5
    console.log(qqcoisa2[0].name)

    //verificar se um objeto existe
    //VERIFICAR DPS

    let ator = {
      name: 'Brad',
      age: 50
    }

    let filmes = [
      {
        name: 'Avengers',
        ano: 2019,
        atores: ['Brad', 'Scarlett']
      }
    ]

    filmes[0].atores = ator;

    let soma = 1 + 2
    console.log(soma);

    console.log(10 - 1);
    console.log(10 / 2);
    console.log(10 % 2 === 0);

    console.log('Jaqueline' + ' ' + 'Kirino');

    let numero = 2
    let numero2 = 3
    let numero3 = '1'
    console.log(numero + numero3) //concatena
    console.log(numero + numero3 + numero2) //concatena
    console.log(numero + numero2 + numero3) //soma primeiro, dps concatena (segue ordem)

    //javascript sempre considera da esquerda pra direita;

    let nome = 'Maria'
    let sobrenome = 'Silva'

    // template literais
    let nomeSobrenome = `Sr(a) ${nome} ${1 + 2}`

    console.log(nomeSobrenome);

    let array2 = [1 - 2];
    let array3 = [3, 4];

    console.log(array2.concat(array3));

    // condicionais:

    const info = {
      name: 'Joao',
      age: 30, 
      isActive: true
    }

    // só o fato de ter alguma informação ele passa
    //result: true
    if(info.name) {
      console.log('ok')
    } else {
      console.log('nok')
    }

    //result: false
    if(info.abacaxi) {
      console.log('ok')
    } else {
      console.log('nok!!!')
    }

    //result: ok (pq converteu)
    if(info.age >= '30') {
      console.log('ok')
    } else {
      console.log('nok!!!')
    }

    //result: true (nem leu o age pq é ou)
    if(info.name === 'Jaqueline' || info.age >= '30') {
      console.log('ok')
    } else {
      console.log('nok!!!')
    }

    //TERNÁRIOS

    //result: false pq não sou a maria
    let qualquercoisa = info.isActive && info.name === 'Maria' ? 'Olha ela tá ativa' : 'Não tá ativa'
    console.log(qualquercoisa);

    //se não colocar o break, continua passsando
    const dia = 3
    switch(dia) {
      case 1:
        console.log('dia 1')
        break;
      case 2:
        console.log('dia 2')
        alert('Olá');
        break;
      case 3:
        console.log('dia 3')
        break;
      default:
        console.log('dia4')
        break;
    }

    //FUNÇÕES

    function somar(numero1, numero2) {
      return numero1 + numero2
    }
    console.log(somar(1, 2))

    const somar2 = function (numero1, numero2) {
      return numero1 = numero2
    }
    console.log(somar2(2,3))

    const somar3 = (num1, num2) => {
      return num1 + num2
    }
    console.log(somar(3,5))

    const somar4 = (num1, num2) => num1 + num2
    console.log(somar4(3,5))

    const alofruta = fruta => console.log(fruta)
    alofruta('abacaxi')


   **********************************************
   EXERCÍCIO:
   
   //Crie uma função que recebe por parâmetro a idade e retorne
   //se é maior ou nao

    const maiorIdade = idade => {
      return idade >= 18
    }
    console.log(maiorIdade(23));

    const maiorIdade2 = idade => idade >= 18
    console.log(maiorIdade2(18))

    const maiorIdade3 = idade => idade >= 18 ? 'Maior' : 'Menor'
    console.log(maiorIdade3(18));

    const maiorIdade4 = idade => {
      if(idade >= 18) return 'Maior'
      return 'Menor'
    }
    console.log(maiorIdade4(20))

        
        
        
        
