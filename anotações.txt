    <style>
        qualquer div se comporta assim
        div {
            background-color: green;
            width: 100px;
            height: 100px;
        }

        só os que tiverem essa classe
        .classe-teste {
            background-color: red;
        }

        só os que tiverem id
        #id-teste {
            background-color: yellow;
        }
    </style>


    div = 1
    class = 10
    id = 100
    div + classe = 11
    classe + classse = 20
    se tiver duas classes iguais -> considera a última (css é cascata)


    a vírgula significa o mesmo comportamento
    .classe-teste, .classe-test2 {
        background-color: yellow;
    }


    width + body

    Identificar o elemento principal e modificar os que estão após dele:

        <style>

            .mae {
                background-color: green;
                width: 200px;
                height: 200px;
            }

            .mae div {
                border: 2px solid black;
                background-color: red;
                width: 44px;
                height: 44px;
            }

            .mae div div {
                background-color: red;
            }

            .mae > div {
                height: 96px;
                width: 96px;
            }

        </style>



position não é de layout, é um comportamento especifico 
o position static não aceita top, left... (tem declarar uma position 
Primeiro montou o layout, e depois moveu - o top e left (ou seja, só muda pra top e left depois que 
renderiza a primeira vez. Mto usado pra animação)
Animação com css é menos custoso.
Leva em consideração o pai

Body com padding 5 é padrão;

A diferença entre o relative e absolute é que o relative leva em consideração o pai e os irmãos;
já o absolute leva em consideração apenas o pai.
O fixed fica isolado;

Se tiver uma cadeia de divs, sempre vai respeitar quem tem o position.. se nenhum tiver, segue o body.
Se nenhum tiver o position relative, não muda nada

O relative sempre leva em consideração o primeiro relative que encontrar;

Os absolutes estão isolados um do outro;




DISPLAY:
    Block: peixe beta...vive sozinho no aquario (pega uma linha inteira);
    Inline: feito para palavras (só paragrafo q nao, mas span sim), não possue caixa (convive normalmente
            com outros). Como inline não tem altura nem largura, ele sumiria se nao escrever nada;
            Ele inclusive coloca um espaço natural entre os dois, tipo entre palavras.
    Inline-block: 
    None: o elemento some da tela;

    se for mudar de block pra inline, mude para inline-block;


DISPLAY FlexBox:
    - Facilita a criação de layout;
    Divididos em container e item;
        Container: diz como os itens vao funcionar

    flex-direction: direção que vai seguir
    justify-content e align-items -> 

    align-self -> usado quando vc quer que um item específico tenha um comportamento diferente;

    Orientado a conteúdo

    -> diferença entre margin e padding;

    -> margin: 10px 5px 20px 15px sempre no sentido horário